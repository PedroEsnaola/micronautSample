plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id "net.ltgt.apt-eclipse" version "0.21"
}



version "0.1"
group "com.example"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-security-jwt"
    implementation "io.micronaut:micronaut-security"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.configuration:micronaut-jdbc-hikari"
    implementation "io.micronaut:micronaut-http-server-netty"

    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-security-jwt"
    annotationProcessor "io.micronaut:micronaut-security"
    annotationProcessor "javax.persistence:javax.persistence-api:2.2"
    annotationProcessor 'io.micronaut.data:micronaut-data-processor:1.0.0.RC1'
    annotationProcessor "io.micronaut:micronaut-validation"

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compileOnly 'jakarta.persistence:jakarta.persistence-api:2.2.2'

    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    compile group: 'io.projectreactor', name: 'reactor-core', version: '3.3.2.RELEASE'
    runtime 'io.micronaut.configuration:micronaut-jdbc-hikari'
    compile 'io.micronaut.data:micronaut-data-jdbc:1.0.0.RC1'
    compile 'org.springframework.security:spring-security-crypto:5.2.1.RELEASE'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "com.example.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}


shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Xms2046M')

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
